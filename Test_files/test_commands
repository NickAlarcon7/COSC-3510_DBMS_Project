# example commands

SQL_command CREATE DATABASE TestDB

SQL_command CREATE TABLE sushi (id INT NOT NULL, price DECIMAL(5, 2) NOT NULL, PRIMARY KEY (id));
SQL_command LOAD DATA sushi /Users/nickalarcon/Desktop/COS-3510_DMBS-Project/COSC-3510_DBMS_Project/test_data.csv

SQL_command CREATE TABLE order_items (sushi_id INT NOT NULL, order_id INT NOT NULL, PRIMARY KEY (sushi_id, order_id), FOREIGN KEY (sushi_id) REFERENCES sushi(id), FOREIGN KEY (order_id) REFERENCES orders(id));
SQL_command LOAD DATA order_items /Users/nickalarcon/Desktop/COS-3510_DMBS-Project/COSC-3510_DBMS_Project/test_data2.csv

SQL_command CREATE TABLE orders (id INT NOT NULL, user_id INT NOT NULL, PRIMARY KEY (id));
SQL_command LOAD DATA orders /Users/nickalarcon/Desktop/COS-3510_DMBS-Project/COSC-3510_DBMS_Project/test_data3.csv


SQL_command SELECT o.user_id, i.order_id, i.sushi_id FROM orders o, order_items i WHERE o.id = i.order_id ORDER BY i.sushi_id DESC
SQL_command SELECT o.user_id, SUM(s.price) AS price FROM orders o JOIN order_items i ON o.id = i.order_id JOIN sushi s ON i.sushi_id = s.id GROUP BY o.user_id

## Demo Test Data
SQL_command CREATE DATABASE Test1

SQL_command CREATE TABLE Rel_i_1_1000 (a INT NOT NULL, b INT NOT NULL, PRIMARY KEY (a));
SQL_command LOAD DATA Rel_i_1_1000 ../Test_files/Rel-i-1-1000.csv

SQL_command CREATE TABLE Rel_i_1_10000 (c INT NOT NULL, d INT NOT NULL, PRIMARY KEY (c));
SQL_command LOAD DATA Rel_i_1_10000 ../Test_files/Rel-i-1-10000.csv

SQL_command CREATE TABLE Rel_i_i_1000 (e INT NOT NULL, f INT NOT NULL, PRIMARY KEY (e));
SQL_command LOAD DATA Rel_i_i_1000 ../Test_files/Rel-i-i-1000.csv

SQL_command CREATE TABLE Rel_i_i_10000 (g INT NOT NULL, h INT NOT NULL, PRIMARY KEY (g));
SQL_command LOAD DATA Rel_i_i_10000 ../Test_files/Rel-i-i-10000.csv

Canned Queries
-- A single aggregation operator 
SQL_command SELECT MIN(c) AS min_column1 FROM Rel_i_1_10000
SQL_command SELECT MAX(h) AS max_column2 FROM Rel_i_i_10000
SQL_command SELECT SUM(d) AS sum_column2 FROM Rel_i_1_10000
SQL_command SELECT AVG(g) AS avg_column1 FROM Rel_i_i_10000
-- Two-clause logical conjunction (AND) and disjunction (OR)
SQL_command SELECT * FROM Rel_i_1_10000 WHERE c > 6000 AND c < 6010
SQL_command SELECT * FROM Rel_i_i_10000 WHERE h > 9995 OR g < 5
-- Single attribute primary key
SQL_command SELECT * FROM Rel_i_i_10000 WHERE h = 10000 OR h = 5000
SQL_command SELECT * FROM Rel_i_i_10000 WHERE g = 10000 OR g = 5000
-- Conjunctive and disjunctive condition ordering
SQL_command SELECT * FROM Rel_i_1_10000 WHERE d = 1 AND c = 1
SQL_command SELECT * FROM Rel_i_1_10000 WHERE c = 1 AND d = 1
-- 2-table equal-join
SQL_command SELECT i_1.a, i_i.e FROM Rel_i_1_1000 i_1, Rel_i_i_1000 i_i WHERE i_1.a = i_i.e AND i_1.a
 < 5
SQL_command SELECT i_1.a, i_i.e FROM Rel_i_1_1000 i_1 JOIN Rel_i_i_1000 i_i ON i_1.a = i_i.e WHERE i_
1.a < 5
-- Merge join
SQL_command SELECT i_1.a, i_i.e FROM Rel_i_1_1000 i_1 JOIN Rel_i_i_1000 i_i ON i_1.a = i_i.e WHERE i_
1.a < 5 ORDER BY i_1.a
-- Right and left join
SQL_command SELECT * FROM Rel_i_1_1000 s_1 RIGHT JOIN Rel_i_1_10000 l_1 ON s_1.a = l_1.c
SQL_command SELECT * FROM Rel_i_1_10000 l_1 LEFT JOIN Rel_i_1_1000 s_1 ON s_1.a = l_1.c WHERE l_1.c >
 9995
-- Tuple Manipulation operators
SQL_command INSERT INTO Rel_i_i_1000 VALUES (1001,1001)
SQL_command SELECT * FROM Rel_i_i_1000 WHERE e > 995
SQL_command INSERT INTO Rel_i_i_1000 VALUES (1001,1001)
SQL_command INSERT INTO Rel_i_i_1000 VALUES (1001,1002)

SQL_command UPDATE Rel_i_1_1000 SET b = 2 WHERE a = 2
SQL_command SELECT * FROM Rel_i_1_1000 WHERE a < 5
SQL_command UPDATE Rel_i_1_1000 SET b = 2
SQL_command SELECT * FROM Rel_i_1_1000 WHERE a < 5

SQL_command DELETE FROM Rel_i_i_10000 WHERE g = 4
SQL_command SELECT * FROM Rel_i_i_10000 WHERE g < 6
SQL_command DELETE FROM Rel_i_i_10000
SQL_command SELECT * FROM Rel_i_i_10000

-- Drop Table
Print_Schemas
SQL_command DROP TABLE Rel_i_i_10000
Print_Schemas

-- Switch Database
Exit
SQL_command USE Test2